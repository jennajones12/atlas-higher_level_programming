>>> from matrix_divided import matrix_divided

# Test with a valid matrix and divisor
>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> div = 2
>>> matrix_divided(matrix, div)
[[0.5, 1.0, 1.5], [2.0, 2.5, 3.0]]

# Test with a matrix of floats and a float divisor
>>> matrix = [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]
>>> div = 2.5
>>> matrix_divided(matrix, div)
[[0.4, 0.8, 1.2], [1.6, 2.0, 2.4]]

# Test with a mix of integers and floats in matrix
>>> matrix = [[1, 2.5, 3], [4, 5.5, 6]]
>>> div = 2
>>> matrix_divided(matrix, div)
[[0.5, 1.25, 1.5], [2.0, 2.75, 3.0]]

# Test with invalid matrix type (not a list of lists)
>>> matrix = [1, 2, 3]
>>> div = 2
>>> matrix_divided(matrix, div)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

# Test with non-uniform row sizes
>>> matrix = [[1, 2], [3, 4, 5]]
>>> div = 2
>>> matrix_divided(matrix, div)
Traceback (most recent call last):
    ...
TypeError: Each row of the matrix must have the same size

# Test with invalid element type in matrix
>>> matrix = [[1, 2, "3"], [4, 5, 6]]
>>> div = 2
>>> matrix_divided(matrix, div)
Traceback (most recent call last):
    ...
TypeError: matrix must be a matrix (list of lists) of integers/floats

# Test with invalid divisor type
>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> div = "2"
>>> matrix_divided(matrix, div)
Traceback (most recent call last):
    ...
TypeError: div must be a number

# Test with zero divisor
>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> div = 0
>>> matrix_divided(matrix, div)
Traceback (most recent call last):
    ...
ZeroDivisionError: division by zero
